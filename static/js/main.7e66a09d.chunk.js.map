{"version":3,"sources":["components/Button/Button.tsx","components/Carousel/Carousel.tsx","components/SettingsContainer/SettingsContainer.tsx","components/App/App.tsx","index.tsx"],"names":["Button","this","props","title","className","type","PureComponent","Carousel","state","index","handleButtonClick","step","images","frameSize","lastIndex","length","nextIndex","setState","infinite","itemWidth","animationDuration","containerWidth","itemTransform","disablePrevButton","disableNextButton","style","width","transition","map","image","transform","src","alt","disabled","onClick","Component","SettingsContainer","handleItemWidthChange","handleFrameSizeChange","handleDurationChange","handleStepChange","handleInfiniteChange","htmlFor","min","max","name","value","onChange","checked","initialState","App","event","currentTarget","prevState","carouselTitle","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7e66a09d.chunk.js","sourcesContent":["import { ButtonHTMLAttributes, PureComponent } from 'react';\nimport './Button.scss';\n\ntype Attributes = Omit<\nButtonHTMLAttributes<HTMLButtonElement>,\n'className' | 'type'\n>;\n\ninterface Props extends Attributes{\n  title: string\n}\n\nexport class Button extends PureComponent<Props> {\n  render() {\n    const { title, ...props } = this.props;\n\n    return (\n      <button\n        {...props}\n        className=\"button\"\n        type=\"button\"\n      >\n        {title}\n      </button>\n    );\n  }\n}\n","import { Component } from 'react';\nimport './Carousel.scss';\nimport { Button } from '../Button';\n\ntype CarouselProps = {\n  images: string[],\n  step: number,\n  frameSize: number,\n  itemWidth: number,\n  animationDuration: number,\n  infinite: boolean,\n};\n\ntype State = {\n  index: number;\n};\n\nexport class Carousel extends Component<CarouselProps, State> {\n  state: State = {\n    index: 0,\n  };\n\n  handleButtonClick = (step: number) => {\n    const {\n      images,\n      frameSize,\n    } = this.props;\n    const { index } = this.state;\n    const lastIndex = images.length - frameSize;\n    const firstIndex = 0;\n    let nextIndex = index + step;\n\n    if (step < 0) {\n      if (index === firstIndex) {\n        nextIndex = lastIndex;\n      } else if (nextIndex < firstIndex) {\n        nextIndex = firstIndex;\n      }\n    }\n\n    if (step > 0) {\n      if (index === lastIndex) {\n        nextIndex = firstIndex;\n      } else if (nextIndex > lastIndex) {\n        nextIndex = lastIndex;\n      }\n    }\n\n    this.setState(() => ({\n      index: nextIndex,\n    }));\n  };\n\n  render() {\n    const {\n      step,\n      infinite,\n      images,\n      frameSize,\n      itemWidth,\n      animationDuration,\n    } = this.props;\n\n    const { index } = this.state;\n\n    const { handleButtonClick } = this;\n\n    const containerWidth = `${frameSize * itemWidth}px`;\n    const itemTransform = `translateX(${-index * itemWidth}px)`;\n    const disablePrevButton = index <= 0 && !infinite;\n    const disableNextButton = index >= images.length - frameSize && !infinite;\n\n    return (\n      <div className=\"carousel\">\n        <div\n          className=\"carousel__container\"\n          style={{ width: `${containerWidth}` }}\n        >\n          <ul\n            className=\"carousel__list\"\n            style={{ transition: `${animationDuration}ms` }}\n          >\n            {images.map((image) => (\n              <li\n                className=\"carousel__item\"\n                key={image}\n                style={{\n                  width: `${itemWidth}px`,\n                  transform: `${itemTransform}`,\n                  transition: `${animationDuration}ms`,\n                }}\n              >\n                <img\n                  src={image}\n                  alt=\"Selected smile\"\n                  style={{ width: `${itemWidth}px` }}\n                />\n              </li>\n            ))}\n          </ul>\n        </div>\n\n        <div className=\"carousel__button-wrapper\">\n          <Button\n            disabled={disablePrevButton}\n            onClick={() => handleButtonClick(-step)}\n            title=\"Prev\"\n          />\n\n          <Button\n            disabled={disableNextButton}\n            data-cy=\"next\"\n            onClick={() => handleButtonClick(step)}\n            title=\"Next\"\n          />\n        </div>\n      </div>\n    );\n  }\n}\n","import { ChangeEvent, PureComponent } from 'react';\nimport './SettingsContainer.scss';\n\ninterface Props {\n  step: number;\n  frameSize: number;\n  itemWidth: number;\n  animationDuration: number;\n  infinite: boolean;\n  handleItemWidthChange: (event: ChangeEvent<HTMLInputElement>) => void\n  handleFrameSizeChange: (event: ChangeEvent<HTMLInputElement>) => void\n  handleDurationChange: (event: ChangeEvent<HTMLInputElement>) => void\n  handleStepChange: (event: ChangeEvent<HTMLInputElement>) => void\n  handleInfiniteChange: () => void\n}\n\nexport class SettingsContainer extends PureComponent<Props> {\n  render() {\n    const {\n      step,\n      frameSize,\n      itemWidth,\n      animationDuration,\n      infinite,\n      handleItemWidthChange,\n      handleFrameSizeChange,\n      handleDurationChange,\n      handleStepChange,\n      handleInfiniteChange,\n    } = this.props;\n\n    return (\n      <div className=\"settings\">\n        <label\n          htmlFor=\"item-width\"\n          className=\"settings__block\"\n        >\n          <p className=\"settings__title\">Item width:</p>\n\n          <input\n            className=\"settings__input\"\n            min={130}\n            max={250}\n            step={10}\n            type=\"number\"\n            name=\"itemWidth\"\n            value={itemWidth}\n            onChange={handleItemWidthChange}\n          />\n        </label>\n\n        <label\n          htmlFor=\"frame-size\"\n          className=\"settings__block\"\n        >\n          <p className=\"settings__title\">Frame size:</p>\n\n          <input\n            className=\"settings__input\"\n            type=\"number\"\n            name=\"frameSize\"\n            max={5}\n            min={1}\n            value={frameSize}\n            onChange={handleFrameSizeChange}\n          />\n        </label>\n\n        <label\n          htmlFor=\"animation-duration\"\n          className=\"settings__block\"\n        >\n          <p className=\"settings__title\">Animation duration:</p>\n\n          <input\n            className=\"settings__input\"\n            type=\"number\"\n            step={100}\n            min={100}\n            name=\"animationDuration\"\n            value={animationDuration}\n            onChange={handleDurationChange}\n          />\n        </label>\n\n        <label\n          htmlFor=\"step\"\n          className=\"settings__block\"\n        >\n          <p className=\"settings__title\">Step:</p>\n\n          <input\n            className=\"settings__input\"\n            type=\"number\"\n            name=\"step\"\n            max={5}\n            min={1}\n            value={step}\n            onChange={handleStepChange}\n          />\n        </label>\n\n        <label\n          htmlFor=\"infinite\"\n          className=\"settings__block\"\n        >\n          <p className=\"settings__title\">Infinite carousel:</p>\n\n          <input\n            className=\"settings__input-checkbox\"\n            type=\"checkbox\"\n            name=\"infinite\"\n            checked={infinite}\n            onChange={handleInfiniteChange}\n          />\n        </label>\n      </div>\n    );\n  }\n}\n","import { ChangeEvent, Component } from 'react';\nimport './App.scss';\nimport { Carousel } from '../Carousel';\nimport { SettingsContainer } from '../SettingsContainer';\n\ninterface State {\n  images: string[];\n  step: number;\n  frameSize: number;\n  itemWidth: number;\n  animationDuration: number;\n  infinite: boolean;\n}\n\nconst initialState = {\n  images: [\n    './img/1.png',\n    './img/2.png',\n    './img/3.png',\n    './img/4.png',\n    './img/5.png',\n    './img/6.png',\n    './img/7.png',\n    './img/8.png',\n    './img/9.png',\n    './img/10.png',\n  ],\n  infinite: false,\n  frameSize: 3,\n  itemWidth: 130,\n  animationDuration: 1000,\n  step: 3,\n};\n\nclass App extends Component<{}, State> {\n  state: Readonly<State> = initialState;\n\n  handleItemWidthChange = (event: ChangeEvent<HTMLInputElement>) => {\n    this.setState({ itemWidth: +event.currentTarget.value });\n  };\n\n  handleFrameSizeChange = (event: ChangeEvent<HTMLInputElement>) => {\n    this.setState({ frameSize: +event.currentTarget.value });\n  };\n\n  handleDurationChange = (event: ChangeEvent<HTMLInputElement>) => {\n    this.setState({ animationDuration: +event.currentTarget.value });\n  };\n\n  handleStepChange = (event: ChangeEvent<HTMLInputElement>) => {\n    this.setState({ step: +event.currentTarget.value });\n  };\n\n  handleInfiniteChange = () => {\n    this.setState(prevState => {\n      return {\n        infinite: !prevState.infinite,\n      };\n    });\n  };\n\n  render() {\n    const {\n      images,\n      step,\n      frameSize,\n      itemWidth,\n      animationDuration,\n      infinite,\n    } = this.state;\n\n    const {\n      handleItemWidthChange,\n      handleFrameSizeChange,\n      handleDurationChange,\n      handleStepChange,\n      handleInfiniteChange,\n    } = this;\n\n    const carouselTitle = `Carousel with ${images.length} images`;\n\n    return (\n      <div className=\"app\">\n        <h1 data-cy=\"title\" className=\"app__title\">{carouselTitle}</h1>\n\n        <Carousel\n          images={images}\n          frameSize={frameSize}\n          itemWidth={itemWidth}\n          animationDuration={animationDuration}\n          infinite={infinite}\n          step={step}\n        />\n\n        <SettingsContainer\n          frameSize={frameSize}\n          itemWidth={itemWidth}\n          animationDuration={animationDuration}\n          infinite={infinite}\n          step={step}\n          handleItemWidthChange={handleItemWidthChange}\n          handleFrameSizeChange={handleFrameSizeChange}\n          handleDurationChange={handleDurationChange}\n          handleStepChange={handleStepChange}\n          handleInfiniteChange={handleInfiniteChange}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './components/App/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}